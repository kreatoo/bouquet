name: Kubernetes Static Validation
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  validate:
    name: Validate Kubernetes Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4.0.0

      - name: Install Helm
        uses: azure/setup-helm@v4.3.0
        
      - name: Install kubeconform
        run: |
          wget https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform-linux-amd64.tar.gz
          sudo mv kubeconform /usr/local/bin
          
      - name: Install kube-linter
        run: |
          curl -L "https://github.com/stackrox/kube-linter/releases/latest/download/kube-linter-linux.tar.gz" | tar -xz
          sudo mv kube-linter /usr/local/bin
          
      - name: Download Pluto
        uses: FairwindsOps/pluto/github-action@master

      - name: Copy example env files for validation
        run: |
          # Copy example env files to their required locations
          for dir in cert-manager mastodon prometheus; do
            if [ -f "$dir/.env.example" ]; then
              echo "Copying $dir/.env.example to $dir/.env"
              cp $dir/.env.example $dir/.env
            fi
          done

      - name: Validate kustomize
        run: |
          echo "Validating kustomization files can generate valid YAML..."
          # Create directory for validation output
          mkdir -p .manifests
          
          # Test individual components with appropriate flags
          for dir in $(find . -maxdepth 1 -mindepth 1 -type d -not -path "./.*"); do
            if [ -f "$dir/kustomization.yaml" ]; then
              echo "Validating $dir"
              # Use --enable-helm for directories that need it
              if [[ "$dir" == "./argocd" || "$dir" == "./traefik" || "$dir" == "./cert-manager" ]]; then
                kubectl kustomize --enable-helm $dir > .manifests/$(basename $dir).yaml
              else
                kubectl kustomize $dir > .manifests/$(basename $dir).yaml
              fi
            fi
          done

      - name: Validate with kubeconform
        run: |
          echo "Running schema validation with kubeconform..."
          if [ -n "$(ls -A .manifests)" ]; then
            # Download common CRD schemas to a local directory
            mkdir -p .crds

            # Download Argo CD CRDs
            echo "Downloading Argo CD CRDs..."
            curl -s -L https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/crds/application-crd.yaml -o .crds/application-crd.yaml
            curl -s -L https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/crds/appproject-crd.yaml -o .crds/appproject-crd.yaml
            
            # Download cert-manager CRDs
            echo "Downloading cert-manager CRDs..."
            curl -s -L https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.crds.yaml -o .crds/cert-manager-crds.yaml
            
            # Download Traefik CRDs
            echo "Downloading Traefik CRDs..."
            curl -s -L https://raw.githubusercontent.com/traefik/traefik/v2.10/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml -o .crds/traefik-crds.yaml
            
            # Run kubeconform with multiple schema sources
            kubeconform -summary \
              -skip CustomResourceDefinition \
              -schema-location default \
              -schema-location .crds \
              -schema-location 'https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json' \
              .manifests/*.yaml
          else
            echo "No manifests to validate"
            exit 1
          fi

      - name: Check for deprecated APIs
        run: |
          echo "Checking for deprecated Kubernetes APIs..."
          if [ -n "$(ls -A .manifests)" ]; then
            pluto detect-files -d .manifests
          else
            echo "No manifests to check for deprecated APIs"
            exit 1
          fi

      - name: Clean up manifests
        run: |
          echo "Cleaning up manifests directory..."
          rm -rf .manifests
          
      - name: Run kube-linter
        run: |
          echo "Running kube-linter for best practices..."
          # Run kube-linter directly on the repository files
          kube-linter lint . --config .kube-linter.yaml || echo "Linting produced warnings"
